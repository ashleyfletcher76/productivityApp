

Steps:
* Create repo with basic structure-- done
* Write an ideas page -- begun/done
* Create a docker compose and Dockerfiles(leave empty for now)
* Create spring boot zip files -- and imported into project -- done
* Create basic Makefile -- done

------

* Create a basic Dockerfile that applies to both -- we build and run containers -- done
* Create the docker compose structure -- env can be injected after -- done
* Run first docker compose -- check works -- no health checks for now -- works and done
* Add .gitignore to root -- done

Thoughts:
* Use Java -- most familiar at this moment
* No need for a full frontend -- no framework etc -- can just use static files
* For simplicity when building we could use a Makefile -- docs must include how run the compose file
* Begin with bonus, simpler to start with it
* No need for spring security -- could add config issues -- keep basic and stick to task
* Dependencies ?? Web, Validation, JPA and H2
* Update the README as we go  to keep track or curl/postman possibilities
* Do I prebuild the gradle or allow the dockerfile to build it? Not sure


Key Points:
* Keep simple
* Microservices - Both services to be containerized
* No need to hash password
* Use spring boot
* Keep documentation
* Token should include data identifying the user
* User must include token in header
* Basic error responses
* BONUS -- use H2 database and add basic test -- integration or unit tests